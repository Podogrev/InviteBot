# Initialize DB and functions
import os
import sqlite3


def loadDB():
    # Creates SQLite database to store info.
    conn = sqlite3.connect('content.sqlite')
    cur = conn.cursor()
    conn.text_factory = str
    cur.executescript('''CREATE TABLE IF NOT EXISTS userdata
    (
    id INTEGER NOT NULL PRIMARY KEY UNIQUE,
    firstname TEXT,
    Name TEXT,
    Organization TEXT,
    Interests TEXT);'''
                      )
    conn.commit()
    conn.close()


def checkUser(update, user_data):
    # Checks if user has visited the bot before
    # If yes, load data of user
    # If no, then create a new entry in database
    conn = sqlite3.connect('content.sqlite')
    cur = conn.cursor()
    conn.text_factory = str
    if len(cur.execute('''SELECT id FROM userdata WHERE id = ?        
            ''', (update.message.from_user.id,)).fetchall()) > 0:
        c = cur.execute('''SELECT Name FROM userdata WHERE id = ?''', (update.message.from_user.id,)).fetchone()
        user_data['Name'] = c[0]
        c = cur.execute('''SELECT Organization FROM userdata WHERE id = ?''', (update.message.from_user.id,)).fetchone()
        user_data['Organization'] = c[0]
        c = cur.execute('''SELECT Interests FROM userdata WHERE id = ?''', (update.message.from_user.id,)).fetchone()
        user_data['Interests'] = c[0]

        print('Past user')
    else:
        cur.execute('''INSERT OR IGNORE INTO userdata (id, firstname) VALUES (?, ?)''',
                    (update.message.from_user.id, update.message.from_user.first_name,))
        print('New user')
    conn.commit()
    conn.close()


def updateUser(category, text, update):
    # Updates user info as inputted.
    conn = sqlite3.connect('content.sqlite')
    cur = conn.cursor()
    conn.text_factory = str
    # Update SQLite database as needed.
    cur.execute('''UPDATE OR IGNORE userdata SET {} = ? WHERE id = ?'''.format(category), \
                (text, update.message.from_user.id,))
    conn.commit()
    conn.close()


def facts_to_str(user_data):
    facts = list()

    for key, value in user_data.items():
        facts.append('{} - {}'.format(key, value))

    return "\n".join(facts).join(['\n', '\n'])


# Bot body
import telebot
from flask import Flask
from telebot import types

import config
import logging

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

CHOOSING, TYPING_REPLY, TYPING_CHOICE = range(3)

server = Flask(__name__)
bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('static/sticker.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("‚öî –Ø –≥–æ—Ç–æ–≤!")
    item2 = types.KeyboardButton("üßô‚Äç‚ôÇÔ∏è –û –≥–∏–ª—å–¥–∏–∏")

    markup.add(item1, item2)

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {0.first_name}!\n–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏—Ç —Ç–µ–±—è –≤ –ü–µ—Ä–º—Å–∫—É—é "
                     "–ì–∏–ª—å–¥–∏—é –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤\n–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º?".format(
                         message.from_user), parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == 'üßô‚Äç‚ôÇÔ∏è –û –≥–∏–ª—å–¥–∏–∏':
            bot.send_message(message.chat.id, 'QA Guild Perm ‚Äî –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã '
                                              '–¥–µ–ª–∏–º—Å—è —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ–≥–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥—É —Ä–∞—Å—Ç–∏.\n\n'
                                              '–ë—É–¥–µ–º –æ–±—Å—É–∂–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –∏ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –≤–º–µ—Å—Ç–µ —Ä–µ—à–∞—Ç—å '
                                              '–ø—Ä–æ–±–ª–µ–º—ã –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ–º—ã. –ú—ã –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –≤—Å–µ—Ö, –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ '
                                              '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ –Ω–æ–≤—ã–π '
                                              '—É—Ä–æ–≤–µ–Ω—å!')
        elif message.text == '‚öî –Ø –≥–æ—Ç–æ–≤!':
            # Form flow
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("3Ô∏è")
            item2 = types.KeyboardButton("4Ô∏è‚É£")

            markup.add(item1, item2)
            bot.send_message(message.chat.id,
                                     "–û—Ç–ª–∏—á–Ω–æ. –î–æ–∫–∞–∂–∏ –º–Ω–µ, —á—Ç–æ —Ç—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–ø–∏—Ä–∞–º–∏–¥—ã. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?", reply_markup=markup)

        elif message.text == '4Ô∏è‚É£':
            link = bot.export_chat_invite_link(chat_id=config.CHAT_ID)
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton('üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
                                               url=link)
            markup.add(item1)

            bot.send_message(message.chat.id,
                             '–¢–∞–∫—Å, –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π. –ú–æ–∂–µ—Ç –≤—Å–µ —Ç–∞–∫–∏ —Ç—ã –∏ –Ω–µ –±–æ—Ç. –í–æ—Ç '
                             '—Ç–≤–æ—è invite-—Å—Å—ã–ª–∫–∞!', reply_markup=markup)

            # @bot.message_handler(content_types=['text'])
            # def lalala(message):
            #     if message.chat.type == 'private':
            #         bot.send_message(message.chat.id,
            #                                  'Ok, {}!. –¢–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏ –∫–æ–º–ø–∞–Ω–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å:'.format(message))
            #
            #         @bot.message_handler(content_types=['text'])
            #         def lalala(message):
            #             if message.chat.type == 'private':
            #                 bot.send_message(message.chat.id,
            #                                          '–ù–µ–ø–ª–æ—Ö–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏ –∫–æ–º–ø–∞–Ω–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å:')
            #
            #                 @bot.message_handler(content_types=['text'])
            #                 def lalala(message):
            #                     if message.chat.type == 'private':
            #                         bot.send_message(message.chat.id,
            #                          '–ü–æ–Ω—è—Ç–Ω–µ–Ω—å–∫–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å–µ—Ü. –ß—Ç–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ '
            #                          '–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏?')
            #
            #                         @bot.message_handler(content_types=['text'])
            #                         def lalala(message):
            #                             if message.chat.type == 'private':
            #                                 link = bot.export_chat_invite_link(chat_id=config.CHAT_ID)
            #                                 markup = types.InlineKeyboardMarkup(row_width=1)
            #                                 item1 = types.InlineKeyboardButton('üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
            #                                                                            url=link)
            #                                 markup.add(item1)
            #
            #                                 bot.send_message(message.chat.id,
            #                                     '–¢–∞–∫—Å, —Å –±—É–º–∞–∂–Ω–æ–π –≤–æ–ª–æ–∫–∏—Ç–æ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏. –í–æ—Ç '
            #                                     '—Ç–≤–æ—è invite-—Å—Å—ã–ª–∫–∞!', reply_markup=markup)

        else:
            bot.send_message(message.chat.id, '–¢—ã –ú–µ–Ω—è –ø–æ—Ç–µ—Å—Ç–∏—Ç—å —Ä–µ—à–∏–ª?üò° –ü–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–µ–±–µ –¥–∞—é!')





@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            bot.send_message(chat_id=config.CHAT_ID,
                             text='–£ –Ω–∞—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}, @{1.username}!'
                             .format(call.from_user, call.from_user))

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–ó–∞—Ö–æ–¥–∏ —Å–∫–æ—Ä–µ–µ!',
                                  reply_markup=None)

            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      text="–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –Ω–∞—à–µ–º —á–∞—Ç–∏–∫–µ")

    except Exception as e:
        print(repr(e))


# RUN
bot.polling(none_stop=True, timeout=10000)

if __name__ == '__main__':
    server.debug = True
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
    loadDB()
